{"ast":null,"code":"// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\"; // Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\n\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:3500\",\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  // Handle token here ...\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/tan/Desktop/FUNiX/MoÌ‚n 5/Assignment/ASM3/ASM3 Front-end/src/API/axiosClient.jsx"],"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","data","error"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CACA;AACA;;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,uBADsB;AAE/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFsB;AAK/BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYN,WAAW,CAACO,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAOAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACrD;AACA,SAAOA,MAAP;AACD,CAHD;AAIAV,WAAW,CAACO,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CACGE,QAAD,IAAc;AACZ,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC7B,WAAOD,QAAQ,CAACC,IAAhB;AACD;;AACD,SAAOD,QAAP;AACD,CANH,EAOGE,KAAD,IAAW;AACT;AACA,QAAMA,KAAN;AACD,CAVH;AAYA,eAAeb,WAAf","sourcesContent":["// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:3500\",\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n  paramsSerializer: (params) => queryString.stringify(params),\n});\naxiosClient.interceptors.request.use(async (config) => {\n  // Handle token here ...\n  return config;\n});\naxiosClient.interceptors.response.use(\n  (response) => {\n    if (response && response.data) {\n      return response.data;\n    }\n    return response;\n  },\n  (error) => {\n    // Handle errors\n    throw error;\n  }\n);\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}